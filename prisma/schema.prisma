// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL") // uses connection pooling
}

model Player {
  id               String             @id @default(cuid())
  name             String
  lastName         String?
  dob              DateTime
  nationality      String
  isActive         Boolean            @default(true)
  teamPlayers      TeamPlayer[]
  matchPlayerStats MatchPlayerStats[]
}

model Team {
  id               String             @id @default(cuid())
  name             String
  createdAt        DateTime           @default(now())
  teamPlayers      TeamPlayer[]
  matchesAsTeam1   Match[]            @relation("Team1")
  matchesAsTeam2   Match[]            @relation("Team2")
  matchPlayerStats MatchPlayerStats[]
}

model TeamPlayer {
  id       String @id @default(cuid())
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
}

model Match {
  id               String             @id @default(cuid())
  team1            Team               @relation("Team1", fields: [team1Id], references: [id], onDelete: Cascade)
  team1Id          String
  team2            Team               @relation("Team2", fields: [team2Id], references: [id], onDelete: Cascade)
  team2Id          String
  scoreTeam1       Int
  scoreTeam2       Int
  matchDate        DateTime
  matchPlayerStats MatchPlayerStats[]
}

model MatchPlayerStats {
  id       String @id @default(cuid())
  match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  goals    Int    @default(0)
  assists  Int    @default(0)
  conceded Int    @default(0)
  mvp      Int    @default(0)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
